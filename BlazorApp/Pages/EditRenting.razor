@page "/createRenting"
@page "/editRenting/{Id:int}"

@inject IRentingApiClient rentingApiClient
@inject NavigationManager NavManager

<EditForm Model="@renting" OnValidSubmit=@FormSubmitted>
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="form-group row">
		<label for="model" class="col-sm-2 col-form-label">
			Model
		</label>
		<div class="col-sm-10">
			<InputNumber id="rentalNo" class="form-control" placeholder="RentalNo" @bind-Value="renting.RentalNo" />
			<ValidationMessage For="@(() => renting.RentalNo)" />
			<InputDate id="rentaldate" class="form-control" placeholder="Rental Date" @bind-Value="renting.RentalDate" />
			<ValidationMessage For="@(() => renting.RentalDate)" />
			<InputDate id="rentalduetime" class="form-control" placeholder="Rental Duetime" @bind-Value="renting.RentalDueTime" />
			<ValidationMessage For="@(() => renting.RentalDueTime)" />
			<InputNumber id="drivedistance" class="form-control" placeholder="Drive Distance" @bind-Value="renting.DriveDistance" />
			<ValidationMessage For="@(() => renting.DriveDistance)" />
		</div>
	</div>
	<div class="form-group row" style="margin-top:20px">
		<label for="title" class="col-sm-2 col-form-label">
		</label>
		<div class="col-sm-10">
			<button type="submit" class="btn btn-primary">Save</button>
		</div>
	</div>
</EditForm>

@code {

	[Parameter]
	public int Id { get; set; }

	private Renting renting = new Renting();
	private EditContext? editContext;
	private ValidationMessageStore? messageStore;
	private string title = "Edit";

	protected override async Task OnInitializedAsync()
	{
		if (Id == 0)
		{
			editContext = new EditContext(renting);
			messageStore = new ValidationMessageStore(editContext);

			title = "Create new";
			return;
		}

		var result = await rentingApiClient.Get(Id);
		if (result.HasError)
		{
			AddValidationErrors(result);
			return;
		}
		renting = result.Value;
	}

	private async Task FormSubmitted()
	{
		var result = await rentingApiClient.Save(renting);
		if (result.HasError)
		{
			AddValidationErrors(result);
			return;
		}

		NavManager.NavigateTo("/");
	}

	private void AddValidationErrors(Result result)
	{
		foreach (var error in result.Errors)
			foreach (var message in error.Value)
			{
				var id = new FieldIdentifier(renting, error.Key);
				messageStore.Add(id, message);
			}
	}
}