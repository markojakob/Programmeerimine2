@page "/createRenting"
@page "/editRenting/{Id:int}"

@inject IRentingApiClient rentingApiClient
@inject IApiClient carApiClient
@inject ICustomerApiClient customerApiClient
@inject NavigationManager NavManager

<EditForm Model="@renting" OnValidSubmit="@FormSubmitted">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group row">
        <label for="rentalNo" class="col-sm-2 col-form-label">RentalNo</label>
        <div class="col-sm-10">
            <InputNumber id="rentalNo" class="form-control" @bind-Value="renting.RentalNo" />
            <ValidationMessage For="@(() => renting.RentalNo)" />

            <InputDate id="rentaldate" class="form-control" @bind-Value="renting.RentalDate" />
            <ValidationMessage For="@(() => renting.RentalDate)" />

            <InputDate id="rentalduetime" class="form-control" @bind-Value="renting.RentalDueTime" />
            <ValidationMessage For="@(() => renting.RentalDueTime)" />

            <InputNumber id="drivedistance" class="form-control" @bind-Value="renting.DriveDistance" />
            <ValidationMessage For="@(() => renting.DriveDistance)" />

            <InputSelect id="customer" class="form-control" @bind-Value="renting.CustomerId">
                <option value="">Select Customer</option>
                @foreach (var customer in customers)
                {
                    <option value="@customer.Id">@customer.FirstName @customer.LastName</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => renting.CustomerId)" />

            <InputSelect id="car" class="form-control" @bind-Value="renting.CarId">
                <option value="">Select Car</option>
                @foreach (var car in cars)
                {
                    <option value="@car.Id">@car.CarMaker @car.Model</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => renting.CarId)" />
        </div>
    </div>

    <div class="form-group row" style="margin-top:20px">
        <div class="col-sm-10">
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    private Renting renting = new();
    private List<Car> cars = new();
    private List<Customer> customers = new();
    private EditContext? editContext;
    private ValidationMessageStore? messageStore;
    private string title = "Edit";
    

    protected override async Task OnInitializedAsync()
    {
        // Load dropdown data
        var carResult = await carApiClient.List();
        if (carResult.HasError)
        {
            AddValidationErrors(carResult);
            return;
        }
        cars = carResult.Value;

        var customerResult = await customerApiClient.List();
        if (customerResult.HasError)
        {
            AddValidationErrors(customerResult);
            return;
        }
        customers = customerResult.Value;

        if (Id == 0)
        {
            editContext = new EditContext(renting);
            messageStore = new ValidationMessageStore(editContext);
            title = "Create new";
            return;
        }

        var rentingResult = await rentingApiClient.Get(Id);
        if (rentingResult.HasError)
        {
            AddValidationErrors(rentingResult);
            return;        
        }
        renting = rentingResult.Value;

        StateHasChanged();
    }

    private async Task FormSubmitted()
    {
        var result = await rentingApiClient.Save(renting);
        if (result.HasError)
        {
            AddValidationErrors(result);
            return;
        }

        NavManager.NavigateTo("/rentings");
    }

    private void AddValidationErrors(Result result)
    {
        foreach (var error in result.Errors)
        {
            foreach (var message in error.Value)
            {
                var id = new FieldIdentifier(renting, error.Key);
                messageStore?.Add(id, message);
            }
        }
    }
}
