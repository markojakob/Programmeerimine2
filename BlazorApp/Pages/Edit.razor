@page "/create"
@page "/edit/{Id:int}"

@inject IApiClient apiClient
@inject NavigationManager NavManager


<EditForm Model="@car" OnValidSubmit=@FormSubmitted>
    <DataAnnotationsValidator />
    <ValidationSummary /> 
    <div class="form-group row">
        <label for="model" class="col-sm-2 col-form-label">
            Model
        </label>
        <div class="col-sm-10">
            <InputText id="model" class="form-control" placeholder="Model" @bind-Value="car.Model" />
            <ValidationMessage For="@(() => car.Model)" />
            <InputText id="carmaker" class="form-control" placeholder="Car Maker" @bind-Value="car.CarMaker" />
            <ValidationMessage For="@(() => car.CarMaker)" />
            <InputNumber id="price" class="form-control" placeholder="Price" @bind-Value="car.Price" />
            <ValidationMessage For="@(() => car.Price)" />
            <InputText id="colour" class="form-control" placeholder="Colour" @bind-Value="car.Colour" />
            <ValidationMessage For="@(() => car.Colour)" />
            <InputText id="description" class="form-control" placeholder="Description" @bind-Value="car.Description" />
            <ValidationMessage For="@(() => car.Description)" />
            <InputNumber id="kmtariff" class="form-control" placeholder="Km Tariff" @bind-Value="car.KmTariff" />
            <ValidationMessage For="@(() => car.KmTariff)" />
            <InputText id="category" class="form-control" placeholder="Category" @bind-Value="car.Category" />
            <ValidationMessage For="@(() => car.Category)" />
        </div>
    </div>
    <div class="form-group row" style="margin-top:20px">
        <label for="title" class="col-sm-2 col-form-label">
        </label>
        <div class="col-sm-10">
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </div>
</EditForm>

@code {

    [Parameter]
    public int Id { get; set; }

    private Car car = new Car();
    private EditContext? editContext;
    private ValidationMessageStore? messageStore;
    private string title = "Edit";

    protected override async Task OnInitializedAsync()
    {
        if (Id == 0)
        {
            editContext = new EditContext(car);
            messageStore = new ValidationMessageStore(editContext);

            title = "Create new";
            return;
        }

        var result = await apiClient.Get(Id);
        if (result.HasError)
        {
            AddValidationErrors(result);
            return;
        }
        car = result.Value;
    }

    private async Task FormSubmitted()
    {
        var result = await apiClient.Save(car);
        if (result.HasError)
        {
            AddValidationErrors(result);
            return;
        }

        NavManager.NavigateTo("/");
    }

    private void AddValidationErrors(Result result)
    {
        foreach(var error in result.Errors)
            foreach(var message in error.Value)
            {
                var id = new FieldIdentifier(car, error.Key);
                messageStore.Add(id, message);
            }
    }
}
